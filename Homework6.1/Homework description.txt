Анонимные типы, кортежи и лямбда-выражения

Цель:
В результате этого ДЗ вы подготовите три программы (проекта).

Тренируемые навыки:
Программы 1 - анонимные типы, их вывод в консоль, сравнение между собой.
Программы 2 - кортежи.
Программы 3 - лямбда-выражения, замыкания


Описание/Пошаговая инструкция выполнения домашнего задания:
Программа 1
Создание объектов
Создайте четыре объекта анонимного типа, описывающих планеты Солнечной системы. Каждый объект должен иметь следующие свойства:

Name (Его название)

OrderNumber (Порядковый номер от Солнца)

EquatorLength (Длина экватора)

PreviousPlanet (Ссылка на предыдущую планету)



Создание объектов
Venus: Создайте объект Venus для планеты Венера.

Earth: Создайте объект Earth для планеты Земля. В качестве PreviousPlanet установите объект Venus.

Mars: Создайте объект Mars для планеты Марс. В качестве PreviousPlanet установите объект Earth.

Venus2: Создайте второй объект для Венеры, с теми же значениями, что и в Venus.



Важно
Объект Venus2 нужен для демонстрации того, что два разных экземпляра анонимного типа, содержащие одинаковые значения, при сравнении через Equals возвращают true.
Также в задании следует обратить внимание на нюанс сравнения: оператор == не перегружен для анонимных типов, поэтому для сравнения значений следует использовать метод Equals.



Вывод и сравнение
Напишите метод PrintPlanet, который принимает два параметра типа dynamic:

Первый параметр — сравниваемая планета.

Второй параметр — Венера.



В этом методе:

Выведите в консоль значения всех свойств объекта планеты.
Сравните текущую планету с Венерой с помощью метода Equals и выведите результат сравнения ("Равны" или "Не равны").


Для любознательных:
Замените тип входных переменных на object и посмотрите что изменилось.



Программа 2
Создайте класс Planet с такими же свойствами, как были у анонимных классов (Name, OrderNumber, EquatorLength, PreviousPlanet).

Создайте класс PlanetCatalog
Создайте сам класс.
Объявите коллекцию List для хранения планет.
При создании экземпляра класса сразу добавьте в коллекцию три планеты: Venus, Earth и Mars.


Реализуйте метод GetPlanet

Метод GetPlanet должен принимать на вход название планеты (тип string) и возвращать кортеж из трёх полей:
Первое поле: порядковый номер планеты (тип int).
Второе поле: длина экватора (тип double).
Третье поле: строка ошибки (тип string).

### Логика работы метода Если планета с указанным названием найдена, вернуть порядковый номер и длину экватора, а третьим полем вернуть null или пустую строку.
Если планета не найдена, вернуть в третьем поле строку "Не удалось найти планету".
На каждый третий вызов метода (например, с помощью счётчика вызовов) возвращать вместо обычного результата сообщение "Вы спрашиваете слишком часто" в третьем поле.

### Вызов метода в Main
Создайте экземпляр класса PlanetCatalog.
Последовательно вызовите метод GetPlanet, передавая названия "Earth", "Limonia", "Mars".
Если планета найдена, выведите в консоль её Name, OrderNumber и EquatorLength.

Если планета не найдена или возвращена ошибка, выведите строку ошибки.


Программа 3
Скопируйте решение из программы 2.
Модификация метода GetPlanet:
Измените сигнатуру метода GetPlanet, добавив дополнительный параметр — делегат (например, типа Func<string, string>).
Делегат принимает название планеты (string) и возвращает строку с сообщением об ошибке.


В методе GetPlanet
Не проверяйте количество вызовов самостоятельно.

Вместо этого вызовите переданный делегат, передав ему название планеты.

Если делегат возвращает непустую строку (ошибку), возвращайте её в третьем поле кортежа.


Вызов метода в Main
При вызове метода GetPlanet передавайте лямбда-выражение, реализующее ту же проверку, что и ранее:

На каждый третий вызов возвращать строку "Вы спрашиваете слишком часто", в остальных случаях возвращать null.

### Дополнительное задание (со звёздочкой) В Main дополнительно вызовите метод GetPlanet для планет Earth, Limonia и Mars, но передайте другую лямбду, которая реализует следующую логику:
Если название планеты — Limonia, вернуть ошибку "Это запретная планета".
Для остальных названий возвращать null.
Убедитесь, что в этой серии вызовов ошибка появляется только для планеты Limonia.