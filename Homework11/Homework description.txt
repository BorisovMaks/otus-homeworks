Метод для LINQ

Цель:
Это домашнее задание поможет разобраться с тем, как работают методы-расширения, а также появится понимание как самостоятельно создавать такие методы.


Описание/Пошаговая инструкция выполнения домашнего задания:
1. Создайте дженерик метод расширения для IEnumerable<T>, возвращающий коллекцию, на которой был вызван -
public static IEnumerable<T> Take(this IEnumerable<T> collection);

2. Ограничьте количество элементов выходной коллекции (добавьте параметр count в метод Take);

3. Напишите свой метод расширения с названием "Top" для коллекции IEnumerable, принимающий значение Х от 1 до 100 и
возвращающий заданное количество процентов от выборки с округлением количества элементов в большую сторону.


То есть для списка var list = new List<int>{1,2,3,4,5,6,7,8,9}; - public static IEnumerable<T> Top(this IEnumerable<T> collection, int percent).

list.Top(30) должно вернуть 30% элементов от выборки по убыванию значений, то есть [9,8,7] (33%), а не [9,8] (22%).
Если переданное значение больше 100 или меньше 1, то выбрасывать ArgumentException.


4. Напишите перегрузку для метода "Top", которая принимает ещё и поле, по которому будут отбираться топ Х элементов.
Например, для var list = new List<Person>{...},
вызов list.Top(30, person => person.Age) должен вернуть 30% пользователей с наибольшим возрастом в порядке убывания оного.